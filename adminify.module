<?php

/**
 * @file
 * Simplify the Drupal admin.
 */

define('ADMINIFY_DEFAULT_THEME', 'kitchen');

define('ADMINIFY_REGION_PREFIX', 'adminify_');

/**
 * Implements hook_menu_alter().
 */
function adminify_menu_alter(&$items) {
  $path = drupal_get_path('module', 'adminify');

  // Handle the callback for the admin path.
  $items['admin']['page callback'] = 'adminify_menu_block_page';
  $items['admin']['access callback'] = TRUE;
  $items['admin']['file'] = 'adminify.admin.inc';
  $items['admin']['file path'] = $path;
}

/**
 * Implements hook_theme().
 */
function adminify_theme($existing, $type, $theme, $path) {
  return array(
    'adminify_links' => array(
      'variables' => array('links' => NULL),
      'file' => 'adminify.theme.inc',
    ),
  );
}

/**
 * Implements hook_custom_theme().
 */
function adminify_custom_theme() {
  // Set the administration theme.
  if (_adminify_is_adminify_anonymous_page()) {
    return ADMINIFY_DEFAULT_THEME;
  }
  else if (_adminify_is_adminify_page()) {
    $info = _adminify_get_info_for_current_user();
    return !empty($info['theme']) ? $info['theme'] : ADMINIFY_DEFAULT_THEME;
  }
}

/**
 * Implements hook_page_build().
 */
function adminify_page_build(&$page) {
  if (_adminify_is_adminify_anonymous_page()) {
    // If user is not logged in, show the login page.
    $page['#theme'] = 'page__adminify__login';
  }
  else if (_adminify_is_adminify_page()) {
    // Render the admin page using page--admin.tpl.php.
    $page['#theme'] = 'page__adminify';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function adminify_preprocess_html(&$variables) {
  if (_adminify_is_adminify_page()) {
    $variables['classes_array'][] = 'page-adminify';
  }
  if (_adminify_is_adminify_anonymous_page()) {
    $variables['classes_array'][] = 'page-adminify-login';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function adminify_preprocess_page(&$variables) {
  global $user;
  if (_adminify_is_adminify_page()) {
    $variables['page'] += _adminify_build_page_for_path(current_path());
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function adminify_form_user_login_alter(&$form, &$form_state, $form_id) {
  // Add a back to front page link.
  $back_link = l(t('Go back to front page'), '<front>');
  $form['actions']['back'] = array(
    '#markup' => $back_link,
  );

  // Add a custom submit callback.
  $form['#submit'][] = 'adminify_form_user_login_submit';
}

/**
 * Custom submit callback for user_login form.
 */
function adminify_form_user_login_submit(&$form, &$form_state) {
  // Redirect to /admin on login.
  $form_state['redirect'] = 'admin';
}

/**
 * Loads adminify info.
 */
function _adminify_get_info() {
  $cid = 'adminify_info';
  if ($cache = cache_get($cid)) {
    return $cache->data;
  }
  else {
    $info = array();

    // Load the Spyc library.
    $spyc_library_path = libraries_get_path('spyc');
    _libraries_require_once($spyc_library_path . '/' . 'Spyc.php');

    // Get info defined by hook_adminify_info.
    $hook = 'adminify_info';
    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      $module_path = drupal_get_path('module', $module);
      if (function_exists($function)) {
        $roles = call_user_func($function);
        foreach ($roles as $role => $role_info) {
          $file_path = $module_path . '/' . $role_info['file'];
          $info[$role] = Spyc::YAMLLoad($file_path);
        }
      }
    }

    // Save to cache.
    cache_set($cid, $info);

    return $info;
  }
}

/**
 * Get adminify info for a role.
 *
 * @param $role string
 *  The name of the role.
 *
 * @return Array
 *  An array of adminify info.
 */
function _adminify_get_info_for_role($role) {
  $info = _adminify_get_info();
  return (isset($info[$role])) ? $info[$role] : array();
}

/**
 * Get adminify info for a user.
 *
 * @param $user
 *  The user object.
 *
 * @return Array
 *  An array of adminify info.
 */
function _adminify_get_info_for_user($user) {
  // Get the most permissive roles.
  $roles = array_intersect_key(user_roles(), $user->roles);
  $role = array_pop($roles);

  return _adminify_get_info_for_role($role);
}

/**
 * Get adminify info for current user.
 *
 * @return Array
 *  An array of adminify info.
 */
function _adminify_get_info_for_current_user() {
  global $user;
  return _adminify_get_info_for_user($user);
}

/**
 * Helper function to check if page is an adminify page.
 */
function _adminify_is_adminify_page() {
  $paths = array(
    'admin',
    'admin/*',
    'node/add/*',
    'node/*/edit',
    'user',
    'user/*',
  );
  return drupal_match_path(current_path(), implode("\n", $paths));
}

/**
 * Check if we are on an adminify page and user is anonymous.
 */
function _adminify_is_adminify_anonymous_page() {
  return (_adminify_is_adminify_page() && user_is_anonymous());
}

function _adminify_build_page_for_path($path) {
  $cid = 'adminify_page_for_path_' . md5($path);
  if ($cache = cache_get($cid)) {
    return $cache->data;
  }
  else {
    $page = array();
    $adminify_info = _adminify_get_info_for_current_user();

    if (count($adminify_info)) {
      $trail = adminify_get_active_trail();
      foreach ($adminify_info['regions'] as $region_name) {
        // Find the region based on the trail.
        if (!empty($adminify_info[$region_name])) {
          $region = $adminify_info[$region_name];
        }
        else {
          // Find region in trail.
          if (!empty($trail)) {
            $region = _adminify_find_region_using_trail($adminify_info, $trail, $region_name);
          }
        }

        // Build the region if found.
        if (!empty($region)) {
          $page[ADMINIFY_REGION_PREFIX . $region_name] = _adminify_build_region($region);
        }
      }
    }

    // Save to cache.
    cache_set($cid, $page);

    return $page;
  }
}

function _adminify_build_region($region) {
  return array(
    '#theme' => 'adminify_links',
    '#links' => $region,
  );
}

function adminify_get_active_trail() {
  $trail = array();
  $path = current_path();
  $adminify_info = _adminify_get_info_for_current_user();

  // Get the trail.
  if ($trail = _adminify_array_search_recursive($path, $adminify_info)) {
    // Remove path from trail.
    array_pop($trail);
  }

  return $trail;
}

function _adminify_array_search_recursive($needle,$haystack) {
  foreach($haystack as $ikey => $value) {
    if($needle === $value) {
      return array($ikey);
    } else if (is_array($value) && $jkey = _adminify_array_search_recursive($needle, $value)) {
      array_unshift($jkey, $ikey);
      return $jkey;
    }
  }
}

function _adminify_find_region_using_trail($info, $trail, $region_name) {
  $temp = &$info;
  foreach($trail as $key) {
    $temp = &$temp[$key];
    if (isset($temp[$region_name])) {
      return $temp[$region_name];
    }
  }
  return FALSE;
}
